// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NormativeCalculator.Database.EF;

namespace NormativeCalculator.Database.Migrations
{
    [DbContext(typeof(NormativeCalculatorDbContext))]
    [Migration("20220609172125_dataseed")]
    partial class dataseed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NormativeCalculator.Database.Entities.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("measureType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Suger",
                            Price = 2m,
                            Quantity = 100,
                            measureType = 3
                        },
                        new
                        {
                            Id = 2,
                            Name = "Flour",
                            Price = 6m,
                            Quantity = 100,
                            measureType = 5
                        },
                        new
                        {
                            Id = 3,
                            Name = "egg",
                            Price = 2m,
                            Quantity = 2,
                            measureType = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Brown suger",
                            Price = 2m,
                            Quantity = 200,
                            measureType = 3
                        },
                        new
                        {
                            Id = 5,
                            Name = "Milk",
                            Price = 1m,
                            Quantity = 200,
                            measureType = 5
                        },
                        new
                        {
                            Id = 6,
                            Name = "Water",
                            Price = 2m,
                            Quantity = 1,
                            measureType = 5
                        },
                        new
                        {
                            Id = 7,
                            Name = "Buter",
                            Price = 4m,
                            Quantity = 350,
                            measureType = 3
                        },
                        new
                        {
                            Id = 8,
                            Name = "Walnut",
                            Price = 10m,
                            Quantity = 2,
                            measureType = 2
                        },
                        new
                        {
                            Id = 9,
                            Name = "Banana",
                            Price = 3m,
                            Quantity = 5,
                            measureType = 1
                        },
                        new
                        {
                            Id = 10,
                            Name = "Salt",
                            Price = 1m,
                            Quantity = 1,
                            measureType = 3
                        });
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipeCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipeCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Recipe");
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.RecipeCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RecipeCategories");
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.RecipeIngredients", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("measureType")
                        .HasColumnType("int");

                    b.HasKey("IngredientId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeIngredients");
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Sanjin",
                            LastName = "Sabanovic",
                            PasswordHash = new byte[] { 33, 221, 42, 51, 129, 106, 90, 220, 43, 24, 183, 249, 161, 176, 159, 47, 241, 128, 215, 106, 135, 164, 149, 137, 10, 90, 236, 249, 47, 147, 91, 61, 169, 23, 4, 254, 145, 33, 154, 222, 68, 141, 62, 49, 115, 125, 146, 174, 136, 162, 65, 12, 105, 184, 152, 14, 185, 64, 168, 41, 27, 195, 61, 95 },
                            PasswordSalt = new byte[] { 169, 33, 241, 124, 97, 32, 178, 40, 126, 63, 167, 78, 29, 134, 174, 97, 18, 210, 175, 110, 222, 17, 177, 244, 12, 179, 113, 163, 116, 229, 116, 129, 55, 82, 54, 131, 248, 97, 207, 247, 229, 29, 216, 134, 212, 159, 232, 55, 147, 46, 139, 107, 242, 183, 147, 61, 73, 106, 174, 175, 107, 10, 43, 0, 230, 70, 246, 77, 60, 108, 147, 117, 175, 87, 220, 49, 173, 136, 251, 123, 150, 242, 188, 89, 60, 71, 112, 11, 231, 221, 242, 82, 167, 24, 111, 220, 71, 19, 163, 139, 32, 92, 247, 250, 127, 85, 82, 240, 16, 96, 83, 182, 159, 209, 188, 113, 49, 214, 99, 114, 11, 40, 234, 26, 129, 145, 22, 244 },
                            Username = "Sanjin"
                        });
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.Recipe", b =>
                {
                    b.HasOne("NormativeCalculator.Database.Entities.RecipeCategories", "RecipeCategory")
                        .WithMany()
                        .HasForeignKey("RecipeCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NormativeCalculator.Database.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecipeCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.RecipeIngredients", b =>
                {
                    b.HasOne("NormativeCalculator.Database.Entities.Ingredient", "Ingredient")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NormativeCalculator.Database.Entities.Recipe", "Recipe")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.Ingredient", b =>
                {
                    b.Navigation("RecipeIngredients");
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.Recipe", b =>
                {
                    b.Navigation("RecipeIngredients");
                });
#pragma warning restore 612, 618
        }
    }
}
