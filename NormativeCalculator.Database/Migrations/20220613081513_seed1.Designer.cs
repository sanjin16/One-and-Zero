// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NormativeCalculator.Database.EF;

namespace NormativeCalculator.Database.Migrations
{
    [DbContext(typeof(NormativeCalculatorDbContext))]
    [Migration("20220613081513_seed1")]
    partial class seed1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NormativeCalculator.Database.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2022, 6, 13, 10, 15, 12, 767, DateTimeKind.Local).AddTicks(4860),
                            Name = "Pancakes"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2022),
                            Name = "Waffles"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2021),
                            Name = "Cake"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2020),
                            Name = "Lava cake"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2020),
                            Name = "Muffin"
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2020),
                            Name = "Carrot cake"
                        });
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("measureType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Suger",
                            Price = 2m,
                            Quantity = 100,
                            measureType = 3
                        },
                        new
                        {
                            Id = 2,
                            Name = "Flour",
                            Price = 6m,
                            Quantity = 100,
                            measureType = 5
                        },
                        new
                        {
                            Id = 3,
                            Name = "egg",
                            Price = 2m,
                            Quantity = 2,
                            measureType = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Brown suger",
                            Price = 2m,
                            Quantity = 200,
                            measureType = 3
                        },
                        new
                        {
                            Id = 5,
                            Name = "Milk",
                            Price = 1m,
                            Quantity = 200,
                            measureType = 5
                        },
                        new
                        {
                            Id = 6,
                            Name = "Water",
                            Price = 2m,
                            Quantity = 1,
                            measureType = 5
                        },
                        new
                        {
                            Id = 7,
                            Name = "Buter",
                            Price = 4m,
                            Quantity = 350,
                            measureType = 3
                        },
                        new
                        {
                            Id = 8,
                            Name = "Walnut",
                            Price = 10m,
                            Quantity = 2,
                            measureType = 2
                        },
                        new
                        {
                            Id = 9,
                            Name = "Banana",
                            Price = 3m,
                            Quantity = 5,
                            measureType = 1
                        },
                        new
                        {
                            Id = 10,
                            Name = "Salt",
                            Price = 1m,
                            Quantity = 1,
                            measureType = 3
                        });
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipeCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipeCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Recipe");
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.RecipeIngredients", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("MeasureType")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("IngredientId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeIngredients");
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Sanjin",
                            LastName = "Sabanovic",
                            PasswordHash = new byte[] { 172, 140, 34, 195, 175, 95, 43, 68, 52, 176, 69, 99, 245, 66, 68, 75, 65, 47, 190, 215, 253, 58, 62, 191, 192, 44, 1, 79, 73, 141, 119, 223, 142, 180, 113, 47, 49, 89, 46, 36, 145, 13, 0, 129, 23, 112, 71, 137, 50, 246, 142, 202, 184, 36, 186, 180, 15, 187, 17, 170, 61, 108, 179, 89 },
                            PasswordSalt = new byte[] { 32, 232, 11, 228, 177, 97, 67, 227, 57, 46, 41, 165, 153, 139, 75, 254, 74, 243, 193, 36, 88, 181, 83, 129, 232, 149, 99, 123, 174, 99, 209, 247, 9, 149, 244, 85, 93, 230, 246, 111, 182, 235, 140, 191, 75, 66, 49, 193, 56, 180, 245, 209, 26, 255, 130, 65, 78, 153, 25, 106, 203, 209, 60, 98, 204, 42, 163, 251, 209, 206, 247, 47, 209, 62, 145, 49, 243, 73, 207, 231, 24, 202, 53, 67, 230, 208, 173, 209, 141, 164, 10, 213, 66, 148, 225, 130, 50, 29, 11, 55, 114, 173, 156, 77, 137, 223, 195, 138, 166, 198, 69, 45, 193, 14, 216, 31, 113, 137, 125, 17, 156, 85, 50, 229, 202, 47, 247, 164 },
                            Username = "sanjin"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Merisa",
                            LastName = "Mulac",
                            PasswordHash = new byte[] { 112, 211, 123, 237, 253, 120, 118, 104, 195, 130, 132, 240, 248, 154, 16, 254, 27, 103, 229, 211, 230, 18, 161, 124, 161, 104, 57, 61, 52, 165, 41, 76, 238, 104, 222, 140, 3, 32, 219, 218, 162, 38, 60, 79, 234, 24, 75, 147, 206, 97, 51, 249, 118, 25, 197, 216, 227, 225, 221, 17, 22, 0, 53, 85 },
                            PasswordSalt = new byte[] { 32, 232, 11, 228, 177, 97, 67, 227, 57, 46, 41, 165, 153, 139, 75, 254, 74, 243, 193, 36, 88, 181, 83, 129, 232, 149, 99, 123, 174, 99, 209, 247, 9, 149, 244, 85, 93, 230, 246, 111, 182, 235, 140, 191, 75, 66, 49, 193, 56, 180, 245, 209, 26, 255, 130, 65, 78, 153, 25, 106, 203, 209, 60, 98, 204, 42, 163, 251, 209, 206, 247, 47, 209, 62, 145, 49, 243, 73, 207, 231, 24, 202, 53, 67, 230, 208, 173, 209, 141, 164, 10, 213, 66, 148, 225, 130, 50, 29, 11, 55, 114, 173, 156, 77, 137, 223, 195, 138, 166, 198, 69, 45, 193, 14, 216, 31, 113, 137, 125, 17, 156, 85, 50, 229, 202, 47, 247, 164 },
                            Username = "merisa"
                        });
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.Recipe", b =>
                {
                    b.HasOne("NormativeCalculator.Database.Entities.Category", "RecipeCategory")
                        .WithMany()
                        .HasForeignKey("RecipeCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NormativeCalculator.Database.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecipeCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.RecipeIngredients", b =>
                {
                    b.HasOne("NormativeCalculator.Database.Entities.Ingredient", "Ingredient")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NormativeCalculator.Database.Entities.Recipe", "Recipe")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.Ingredient", b =>
                {
                    b.Navigation("RecipeIngredients");
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.Recipe", b =>
                {
                    b.Navigation("RecipeIngredients");
                });
#pragma warning restore 612, 618
        }
    }
}
