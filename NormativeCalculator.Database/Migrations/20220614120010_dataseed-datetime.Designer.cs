// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NormativeCalculator.Database.EF;

namespace NormativeCalculator.Database.Migrations
{
    [DbContext(typeof(NormativeCalculatorDbContext))]
    [Migration("20220614120010_dataseed-datetime")]
    partial class dataseeddatetime
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NormativeCalculator.Database.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2022, 6, 14, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Pancakes"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2020, 8, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Waffles"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2021, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Cake"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2021, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Lava cake"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2022, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Muffin"
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2022),
                            IsDeleted = false,
                            Name = "Carrot cake"
                        });
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MeasureType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            MeasureType = 3,
                            Name = "Suger",
                            Price = 2m,
                            Quantity = 100
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            MeasureType = 5,
                            Name = "Flour",
                            Price = 6m,
                            Quantity = 100
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            MeasureType = 1,
                            Name = "egg",
                            Price = 2m,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            MeasureType = 3,
                            Name = "Brown suger",
                            Price = 2m,
                            Quantity = 200
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            MeasureType = 5,
                            Name = "Milk",
                            Price = 1m,
                            Quantity = 200
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            MeasureType = 5,
                            Name = "Water",
                            Price = 2m,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            MeasureType = 3,
                            Name = "Buter",
                            Price = 4m,
                            Quantity = 350
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            MeasureType = 2,
                            Name = "Walnut",
                            Price = 10m,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            MeasureType = 1,
                            Name = "Banana",
                            Price = 3m,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 10,
                            IsDeleted = false,
                            MeasureType = 3,
                            Name = "Salt",
                            Price = 1m,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Recipe");
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.RecipeIngredients", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("MeasureType")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("IngredientId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeIngredients");
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Sanjin",
                            LastName = "Sabanovic",
                            PasswordHash = new byte[] { 60, 63, 124, 60, 40, 182, 231, 213, 13, 227, 237, 136, 187, 111, 166, 108, 67, 121, 238, 111, 193, 16, 181, 208, 193, 249, 163, 188, 35, 212, 166, 118, 16, 212, 200, 195, 245, 134, 201, 200, 184, 124, 10, 96, 105, 145, 249, 67, 215, 228, 54, 189, 11, 136, 175, 234, 245, 106, 134, 207, 53, 238, 116, 94 },
                            PasswordSalt = new byte[] { 117, 136, 206, 44, 102, 128, 79, 252, 156, 227, 210, 95, 205, 54, 35, 242, 219, 201, 225, 120, 217, 174, 170, 220, 74, 238, 28, 4, 58, 132, 87, 218, 51, 220, 102, 45, 155, 150, 126, 240, 89, 46, 57, 127, 41, 234, 226, 212, 255, 188, 108, 197, 141, 29, 90, 185, 196, 128, 115, 239, 144, 197, 227, 220, 44, 95, 119, 191, 220, 106, 224, 186, 236, 205, 67, 190, 113, 223, 185, 18, 121, 17, 217, 93, 84, 35, 174, 199, 2, 78, 224, 128, 201, 203, 189, 73, 18, 96, 253, 220, 221, 21, 4, 155, 198, 101, 252, 111, 114, 13, 122, 31, 141, 31, 23, 23, 176, 175, 62, 75, 189, 95, 209, 247, 232, 141, 94, 181 },
                            Username = "sanjin"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Merisa",
                            LastName = "Mulac",
                            PasswordHash = new byte[] { 160, 214, 183, 242, 235, 154, 191, 18, 180, 9, 111, 122, 98, 251, 11, 156, 120, 50, 232, 126, 75, 125, 171, 3, 68, 51, 195, 82, 93, 204, 54, 172, 144, 3, 177, 115, 197, 50, 33, 205, 112, 209, 96, 134, 160, 130, 101, 6, 61, 134, 96, 90, 217, 61, 233, 216, 255, 222, 129, 21, 43, 111, 200, 173 },
                            PasswordSalt = new byte[] { 117, 136, 206, 44, 102, 128, 79, 252, 156, 227, 210, 95, 205, 54, 35, 242, 219, 201, 225, 120, 217, 174, 170, 220, 74, 238, 28, 4, 58, 132, 87, 218, 51, 220, 102, 45, 155, 150, 126, 240, 89, 46, 57, 127, 41, 234, 226, 212, 255, 188, 108, 197, 141, 29, 90, 185, 196, 128, 115, 239, 144, 197, 227, 220, 44, 95, 119, 191, 220, 106, 224, 186, 236, 205, 67, 190, 113, 223, 185, 18, 121, 17, 217, 93, 84, 35, 174, 199, 2, 78, 224, 128, 201, 203, 189, 73, 18, 96, 253, 220, 221, 21, 4, 155, 198, 101, 252, 111, 114, 13, 122, 31, 141, 31, 23, 23, 176, 175, 62, 75, 189, 95, 209, 247, 232, 141, 94, 181 },
                            Username = "merisa"
                        });
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.Recipe", b =>
                {
                    b.HasOne("NormativeCalculator.Database.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NormativeCalculator.Database.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.RecipeIngredients", b =>
                {
                    b.HasOne("NormativeCalculator.Database.Entities.Ingredient", "Ingredient")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NormativeCalculator.Database.Entities.Recipe", "Recipe")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.Ingredient", b =>
                {
                    b.Navigation("RecipeIngredients");
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.Recipe", b =>
                {
                    b.Navigation("RecipeIngredients");
                });
#pragma warning restore 612, 618
        }
    }
}
