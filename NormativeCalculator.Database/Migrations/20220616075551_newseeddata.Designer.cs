// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NormativeCalculator.Database.EF;

namespace NormativeCalculator.Database.Migrations
{
    [DbContext(typeof(NormativeCalculatorDbContext))]
    [Migration("20220616075551_newseeddata")]
    partial class newseeddata
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NormativeCalculator.Database.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2020, 3, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Pancakes"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2021, 8, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Waffles"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2021, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Cake"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2021, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Lava cake"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2022, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Muffin"
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2022, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Carrot cake"
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2022, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Cheesecake"
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Coffee Cake Recipes"
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2022, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Coconut Cake"
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Cupcakes"
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2022, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Fruitcake"
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(2022, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Holiday cake"
                        });
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MeasureType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            MeasureType = 3,
                            Name = "Suger",
                            Price = 2m,
                            Quantity = 100
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            MeasureType = 5,
                            Name = "Flour",
                            Price = 6m,
                            Quantity = 100
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            MeasureType = 1,
                            Name = "Egg",
                            Price = 2m,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            MeasureType = 3,
                            Name = "Brown suger",
                            Price = 2m,
                            Quantity = 200
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            MeasureType = 5,
                            Name = "Milk",
                            Price = 1m,
                            Quantity = 200
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            MeasureType = 5,
                            Name = "Water",
                            Price = 2m,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            MeasureType = 3,
                            Name = "Buter",
                            Price = 4m,
                            Quantity = 350
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            MeasureType = 2,
                            Name = "Walnut",
                            Price = 10m,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            MeasureType = 1,
                            Name = "Banana",
                            Price = 3m,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 10,
                            IsDeleted = false,
                            MeasureType = 3,
                            Name = "Salt",
                            Price = 1m,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Recipe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            DateCreated = new DateTime(2022, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "This easy American pancake recipe makes light and fluffy pancakes that are great for a weekend brunch.",
                            IsDeleted = false,
                            Name = "Lite Carrot Cake",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 6,
                            DateCreated = new DateTime(2022, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Pipe royal icing carrots on parchment to decorate your cake.",
                            IsDeleted = false,
                            Name = "Royal Icing Carrots",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 7,
                            DateCreated = new DateTime(2022, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "This is a great recipe that gets compliments when ever I make it..",
                            IsDeleted = false,
                            Name = "Brownie Caramel Cheesecake",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 7,
                            DateCreated = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Love lemon meringue pie and cheesecake?",
                            IsDeleted = false,
                            Name = "Lemon Meringue Cheesecake",
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 8,
                            DateCreated = new DateTime(2022, 3, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Love lemon meringue pie and cheesecake?",
                            IsDeleted = false,
                            Name = "Blueberry Buttermilk Coffeecake",
                            UserId = 7
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 8,
                            DateCreated = new DateTime(2022, 3, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "This is really easy and so very, very good.",
                            IsDeleted = false,
                            Name = "Apple Coffee Cake",
                            UserId = 3
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 9,
                            DateCreated = new DateTime(2022, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A moist coconut pound cake, a crowd pleaser.",
                            IsDeleted = false,
                            Name = "Coconut Cream Pound Cake",
                            UserId = 4
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 9,
                            DateCreated = new DateTime(2022, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Coconut oil is the special ingredient in these delicately flavored, tender cupcakes. Garnish with a slice of fresh Key lime if desired.",
                            IsDeleted = false,
                            Name = "Coconut Cupcakes",
                            UserId = 5
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 10,
                            DateCreated = new DateTime(2022, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "This simple white cake recipe uses just 7 ingredients.",
                            IsDeleted = false,
                            Name = "Simple White Cake",
                            UserId = 5
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 10,
                            DateCreated = new DateTime(2022, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A cinnamon sugary cupcake reminiscent of the deep - fried Mexican dessert!.",
                            IsDeleted = false,
                            Name = "Sopapilla Cupcakes",
                            UserId = 6
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 11,
                            DateCreated = new DateTime(2022, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "This has been a favorite of my husband's since I can long remember.",
                            IsDeleted = false,
                            Name = "English Walnut Date Cake",
                            UserId = 3
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 11,
                            DateCreated = new DateTime(2022, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "This is a large recipe that is rich and dark.",
                            IsDeleted = false,
                            Name = "Festive Fruitcakee",
                            UserId = 3
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 12,
                            DateCreated = new DateTime(2022, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A sweet biscuit-style shortcake with two layers of juicy strawberries and cream.",
                            IsDeleted = false,
                            Name = "Strawberry Shortcake",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.RecipeIngredients", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("MeasureType")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("IngredientId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeIngredients");

                    b.HasData(
                        new
                        {
                            IngredientId = 3,
                            RecipeId = 1,
                            MeasureType = 1,
                            Quantity = 3
                        },
                        new
                        {
                            IngredientId = 3,
                            RecipeId = 2,
                            MeasureType = 2,
                            Quantity = 3
                        });
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Sanjin",
                            LastName = "Sabanovic",
                            PasswordHash = new byte[] { 135, 255, 37, 230, 57, 153, 118, 226, 167, 74, 14, 137, 170, 231, 24, 42, 41, 200, 187, 230, 131, 42, 110, 102, 134, 52, 254, 245, 229, 78, 108, 107, 217, 36, 24, 62, 46, 31, 66, 168, 40, 219, 88, 142, 28, 65, 70, 235, 146, 196, 3, 111, 188, 219, 165, 89, 254, 39, 215, 134, 224, 52, 114, 68 },
                            PasswordSalt = new byte[] { 9, 43, 127, 204, 98, 149, 182, 21, 19, 223, 31, 86, 23, 187, 4, 56, 93, 189, 174, 38, 41, 34, 48, 94, 104, 154, 224, 185, 78, 93, 69, 238, 16, 221, 181, 65, 197, 80, 100, 169, 98, 173, 128, 20, 207, 66, 181, 77, 37, 181, 158, 127, 149, 179, 232, 68, 61, 63, 142, 157, 208, 87, 216, 151, 46, 121, 204, 175, 29, 132, 236, 172, 132, 64, 225, 62, 197, 246, 241, 35, 236, 86, 187, 82, 78, 8, 191, 242, 247, 93, 125, 90, 44, 56, 99, 49, 187, 42, 160, 230, 159, 21, 123, 123, 184, 48, 246, 142, 118, 8, 217, 179, 211, 226, 9, 1, 235, 249, 109, 226, 208, 198, 103, 0, 239, 199, 167, 208 },
                            Username = "sanjin"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Merisa",
                            LastName = "Mulac",
                            PasswordHash = new byte[] { 96, 9, 29, 173, 125, 160, 80, 166, 76, 113, 243, 25, 152, 177, 69, 132, 139, 245, 184, 59, 241, 215, 51, 138, 132, 6, 140, 58, 202, 175, 21, 173, 15, 181, 7, 199, 193, 59, 182, 244, 213, 50, 51, 123, 89, 54, 23, 77, 37, 206, 212, 226, 133, 186, 248, 164, 58, 219, 248, 51, 68, 22, 197, 144 },
                            PasswordSalt = new byte[] { 9, 43, 127, 204, 98, 149, 182, 21, 19, 223, 31, 86, 23, 187, 4, 56, 93, 189, 174, 38, 41, 34, 48, 94, 104, 154, 224, 185, 78, 93, 69, 238, 16, 221, 181, 65, 197, 80, 100, 169, 98, 173, 128, 20, 207, 66, 181, 77, 37, 181, 158, 127, 149, 179, 232, 68, 61, 63, 142, 157, 208, 87, 216, 151, 46, 121, 204, 175, 29, 132, 236, 172, 132, 64, 225, 62, 197, 246, 241, 35, 236, 86, 187, 82, 78, 8, 191, 242, 247, 93, 125, 90, 44, 56, 99, 49, 187, 42, 160, 230, 159, 21, 123, 123, 184, 48, 246, 142, 118, 8, 217, 179, 211, 226, 9, 1, 235, 249, 109, 226, 208, 198, 103, 0, 239, 199, 167, 208 },
                            Username = "merisa"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Alema",
                            LastName = "Duvnjak",
                            PasswordHash = new byte[] { 225, 216, 226, 176, 60, 127, 162, 253, 87, 60, 36, 30, 247, 70, 4, 159, 197, 85, 55, 109, 245, 152, 152, 180, 251, 217, 127, 227, 33, 196, 71, 73, 167, 219, 120, 223, 116, 243, 55, 219, 47, 156, 154, 16, 196, 0, 85, 180, 8, 234, 127, 218, 155, 113, 29, 250, 36, 136, 0, 152, 138, 42, 43, 227 },
                            PasswordSalt = new byte[] { 9, 43, 127, 204, 98, 149, 182, 21, 19, 223, 31, 86, 23, 187, 4, 56, 93, 189, 174, 38, 41, 34, 48, 94, 104, 154, 224, 185, 78, 93, 69, 238, 16, 221, 181, 65, 197, 80, 100, 169, 98, 173, 128, 20, 207, 66, 181, 77, 37, 181, 158, 127, 149, 179, 232, 68, 61, 63, 142, 157, 208, 87, 216, 151, 46, 121, 204, 175, 29, 132, 236, 172, 132, 64, 225, 62, 197, 246, 241, 35, 236, 86, 187, 82, 78, 8, 191, 242, 247, 93, 125, 90, 44, 56, 99, 49, 187, 42, 160, 230, 159, 21, 123, 123, 184, 48, 246, 142, 118, 8, 217, 179, 211, 226, 9, 1, 235, 249, 109, 226, 208, 198, 103, 0, 239, 199, 167, 208 },
                            Username = "alema"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Amra",
                            LastName = "Dedic",
                            PasswordHash = new byte[] { 90, 155, 165, 119, 20, 48, 132, 98, 64, 253, 81, 242, 147, 181, 23, 113, 252, 156, 223, 215, 45, 224, 69, 139, 252, 159, 172, 158, 101, 226, 22, 40, 182, 152, 198, 127, 75, 232, 49, 42, 92, 11, 170, 117, 146, 226, 91, 104, 197, 210, 38, 106, 242, 47, 194, 172, 1, 134, 152, 152, 0, 213, 225, 16 },
                            PasswordSalt = new byte[] { 9, 43, 127, 204, 98, 149, 182, 21, 19, 223, 31, 86, 23, 187, 4, 56, 93, 189, 174, 38, 41, 34, 48, 94, 104, 154, 224, 185, 78, 93, 69, 238, 16, 221, 181, 65, 197, 80, 100, 169, 98, 173, 128, 20, 207, 66, 181, 77, 37, 181, 158, 127, 149, 179, 232, 68, 61, 63, 142, 157, 208, 87, 216, 151, 46, 121, 204, 175, 29, 132, 236, 172, 132, 64, 225, 62, 197, 246, 241, 35, 236, 86, 187, 82, 78, 8, 191, 242, 247, 93, 125, 90, 44, 56, 99, 49, 187, 42, 160, 230, 159, 21, 123, 123, 184, 48, 246, 142, 118, 8, 217, 179, 211, 226, 9, 1, 235, 249, 109, 226, 208, 198, 103, 0, 239, 199, 167, 208 },
                            Username = "amra"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Mirza",
                            LastName = "Lepir",
                            PasswordHash = new byte[] { 158, 244, 225, 173, 61, 76, 145, 55, 63, 57, 60, 201, 183, 238, 143, 100, 7, 165, 181, 111, 152, 134, 188, 244, 166, 59, 216, 159, 21, 182, 153, 102, 42, 16, 79, 194, 247, 212, 162, 139, 67, 16, 107, 100, 242, 133, 170, 148, 149, 79, 206, 13, 44, 176, 230, 121, 99, 250, 58, 6, 111, 146, 189, 228 },
                            PasswordSalt = new byte[] { 9, 43, 127, 204, 98, 149, 182, 21, 19, 223, 31, 86, 23, 187, 4, 56, 93, 189, 174, 38, 41, 34, 48, 94, 104, 154, 224, 185, 78, 93, 69, 238, 16, 221, 181, 65, 197, 80, 100, 169, 98, 173, 128, 20, 207, 66, 181, 77, 37, 181, 158, 127, 149, 179, 232, 68, 61, 63, 142, 157, 208, 87, 216, 151, 46, 121, 204, 175, 29, 132, 236, 172, 132, 64, 225, 62, 197, 246, 241, 35, 236, 86, 187, 82, 78, 8, 191, 242, 247, 93, 125, 90, 44, 56, 99, 49, 187, 42, 160, 230, 159, 21, 123, 123, 184, 48, 246, 142, 118, 8, 217, 179, 211, 226, 9, 1, 235, 249, 109, 226, 208, 198, 103, 0, 239, 199, 167, 208 },
                            Username = "mirza"
                        },
                        new
                        {
                            Id = 6,
                            FirstName = "Haris",
                            LastName = "Tulic",
                            PasswordHash = new byte[] { 47, 139, 94, 245, 146, 100, 71, 192, 217, 126, 199, 254, 179, 148, 220, 128, 105, 89, 105, 197, 112, 136, 212, 62, 185, 66, 41, 170, 4, 228, 96, 184, 162, 219, 22, 226, 181, 179, 195, 147, 73, 129, 54, 246, 120, 254, 236, 151, 102, 234, 79, 212, 166, 46, 191, 141, 123, 124, 8, 44, 6, 12, 190, 168 },
                            PasswordSalt = new byte[] { 9, 43, 127, 204, 98, 149, 182, 21, 19, 223, 31, 86, 23, 187, 4, 56, 93, 189, 174, 38, 41, 34, 48, 94, 104, 154, 224, 185, 78, 93, 69, 238, 16, 221, 181, 65, 197, 80, 100, 169, 98, 173, 128, 20, 207, 66, 181, 77, 37, 181, 158, 127, 149, 179, 232, 68, 61, 63, 142, 157, 208, 87, 216, 151, 46, 121, 204, 175, 29, 132, 236, 172, 132, 64, 225, 62, 197, 246, 241, 35, 236, 86, 187, 82, 78, 8, 191, 242, 247, 93, 125, 90, 44, 56, 99, 49, 187, 42, 160, 230, 159, 21, 123, 123, 184, 48, 246, 142, 118, 8, 217, 179, 211, 226, 9, 1, 235, 249, 109, 226, 208, 198, 103, 0, 239, 199, 167, 208 },
                            Username = "haris"
                        },
                        new
                        {
                            Id = 7,
                            FirstName = "Nejra",
                            LastName = "Setka",
                            PasswordHash = new byte[] { 59, 3, 253, 64, 238, 181, 13, 9, 166, 75, 226, 175, 188, 24, 78, 150, 76, 221, 233, 0, 59, 146, 3, 253, 196, 78, 70, 228, 164, 165, 121, 237, 254, 28, 181, 212, 213, 50, 167, 96, 6, 63, 190, 251, 122, 163, 219, 37, 144, 47, 147, 41, 182, 219, 201, 65, 111, 72, 237, 91, 192, 96, 113, 221 },
                            PasswordSalt = new byte[] { 9, 43, 127, 204, 98, 149, 182, 21, 19, 223, 31, 86, 23, 187, 4, 56, 93, 189, 174, 38, 41, 34, 48, 94, 104, 154, 224, 185, 78, 93, 69, 238, 16, 221, 181, 65, 197, 80, 100, 169, 98, 173, 128, 20, 207, 66, 181, 77, 37, 181, 158, 127, 149, 179, 232, 68, 61, 63, 142, 157, 208, 87, 216, 151, 46, 121, 204, 175, 29, 132, 236, 172, 132, 64, 225, 62, 197, 246, 241, 35, 236, 86, 187, 82, 78, 8, 191, 242, 247, 93, 125, 90, 44, 56, 99, 49, 187, 42, 160, 230, 159, 21, 123, 123, 184, 48, 246, 142, 118, 8, 217, 179, 211, 226, 9, 1, 235, 249, 109, 226, 208, 198, 103, 0, 239, 199, 167, 208 },
                            Username = "nejra"
                        });
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.Recipe", b =>
                {
                    b.HasOne("NormativeCalculator.Database.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NormativeCalculator.Database.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.RecipeIngredients", b =>
                {
                    b.HasOne("NormativeCalculator.Database.Entities.Ingredient", "Ingredient")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NormativeCalculator.Database.Entities.Recipe", "Recipe")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.Ingredient", b =>
                {
                    b.Navigation("RecipeIngredients");
                });

            modelBuilder.Entity("NormativeCalculator.Database.Entities.Recipe", b =>
                {
                    b.Navigation("RecipeIngredients");
                });
#pragma warning restore 612, 618
        }
    }
}
